// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: app.proto

package app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppController_Accumulate_FullMethodName = "/app.AppController/Accumulate"
)

// AppControllerClient is the client API for AppController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppControllerClient interface {
	Accumulate(ctx context.Context, in *NumberArray, opts ...grpc.CallOption) (*SumOfNumberArray, error)
}

type appControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewAppControllerClient(cc grpc.ClientConnInterface) AppControllerClient {
	return &appControllerClient{cc}
}

func (c *appControllerClient) Accumulate(ctx context.Context, in *NumberArray, opts ...grpc.CallOption) (*SumOfNumberArray, error) {
	out := new(SumOfNumberArray)
	err := c.cc.Invoke(ctx, AppController_Accumulate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppControllerServer is the server API for AppController service.
// All implementations must embed UnimplementedAppControllerServer
// for forward compatibility
type AppControllerServer interface {
	Accumulate(context.Context, *NumberArray) (*SumOfNumberArray, error)
	mustEmbedUnimplementedAppControllerServer()
}

// UnimplementedAppControllerServer must be embedded to have forward compatible implementations.
type UnimplementedAppControllerServer struct {
}

func (UnimplementedAppControllerServer) Accumulate(context.Context, *NumberArray) (*SumOfNumberArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accumulate not implemented")
}
func (UnimplementedAppControllerServer) mustEmbedUnimplementedAppControllerServer() {}

// UnsafeAppControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppControllerServer will
// result in compilation errors.
type UnsafeAppControllerServer interface {
	mustEmbedUnimplementedAppControllerServer()
}

func RegisterAppControllerServer(s grpc.ServiceRegistrar, srv AppControllerServer) {
	s.RegisterService(&AppController_ServiceDesc, srv)
}

func _AppController_Accumulate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppControllerServer).Accumulate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppController_Accumulate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppControllerServer).Accumulate(ctx, req.(*NumberArray))
	}
	return interceptor(ctx, in, info, handler)
}

// AppController_ServiceDesc is the grpc.ServiceDesc for AppController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.AppController",
	HandlerType: (*AppControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Accumulate",
			Handler:    _AppController_Accumulate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}
